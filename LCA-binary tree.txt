
problem link: https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/

class Solution {
public:
    bool helper(TreeNode* root, vector<int>&path, TreeNode* n)
    {
        path.push_back(root->val);
        if(root->val==n->val)
            return true;
        
        if((root->left && helper(root->left,path,n))||(root->right && helper(root->right,path,n)) )
            return true;
        path.pop_back();
        return false;
    }
    
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL)
            return NULL;
        int i;
        vector<int> path1,path2;
        if(!helper(root,path1,p)||!helper(root,path2,q))
        {
            return NULL;
            }
        
        for( i=0; i<path1.size() && i<path2.size();i++)
        {
            if(path1[i]!=path2[i]){
                break;
            }
                      
        }
        TreeNode* x=new TreeNode(0);
            x->val=path1[i-1];
        return x;
    }
};